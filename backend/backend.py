# import asyncio
# import websockets
# import json
# import speech_recognition as sr
# import sys
# import io
# import threading

# # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–∞ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞ ---
# sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
# sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Ä–µ—á ---
# r = sr.Recognizer()
# clients = set()

# def record_text():
#     """
#     –°–ª—É—à–∞ –∑–∞ –∞—É–¥–∏–æ –æ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –≥–æ –ø—Ä–µ–≤—Ä—ä—â–∞ –≤ —Ç–µ–∫—Å—Ç.
#     –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ –ë–õ–û–ö–ò–†–ê–©–ê.
#     """
#     try:
#         with sr.Microphone() as source:
#             r.adjust_for_ambient_noise(source, duration=0.2)
#             print("–°–ª—É—à–∞–º –∑–∞ –∫–æ–º–∞–Ω–¥–∞...")
#             audio = r.listen(source)
#             MyText = r.recognize_google(audio, language="bg-BG")
#             print(f"–í–∏–µ –∫–∞–∑–∞—Ö—Ç–µ: {MyText}")
#             return MyText.lower()
#     except sr.RequestError as e:
#         print(f"–ì—Ä–µ—à–∫–∞ –≤ –∑–∞—è–≤–∫–∞—Ç–∞ –∫—ä–º API-—Ç–æ; {e}")
#         return None
#     except sr.UnknownValueError:
#         print("–ù–µ –º–æ–∂–∞—Ö –¥–∞ —Ä–∞–∑–±–µ—Ä–∞ –∫–∞–∑–∞–Ω–æ—Ç–æ. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.")
#         return None
#     except Exception as e:
#         print(f"–í—ä–∑–Ω–∏–∫–Ω–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
#         return None

# async def send_to_all(message):
#     """–ò–∑–ø—Ä–∞—â–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –¥–æ –≤—Å–∏—á–∫–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏."""
#     if clients:
#         await asyncio.gather(*[client.send(message) for client in clients])

# async def recognize_loop():
#     """
#     –û—Å–Ω–æ–≤–µ–Ω —Ü–∏–∫—ä–ª, –∫–æ–π—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª—É—à–∞ –∑–∞ –∫–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞.
#     """
#     loop = asyncio.get_running_loop()
#     while True:
#         # –ò–∑–≤–∏–∫–≤–∞–º–µ –±–ª–æ–∫–∏—Ä–∞—â–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –æ—Ç–¥–µ–ª–Ω–∞ –Ω–∏—à–∫–∞ (thread)
#         text = await loop.run_in_executor(None, record_text)
        
#         if text and "–¥–∂–∞—Ä–≤–∏—Å" in text:
#             print("üü¢ –ö–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞ '–î–∂–∞—Ä–≤–∏—Å' –µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞!")
#             msg = json.dumps({"wake_word": "Jarvis"})
#             # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ call_soon_threadsafe, –∑–∞ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
#             # –æ—Ç –Ω–∏—à–∫–∞—Ç–∞ –∫—ä–º –æ—Å–Ω–æ–≤–Ω–∏—è asyncio —Ü–∏–∫—ä–ª.
#             asyncio.run_coroutine_threadsafe(send_to_all(msg), loop)

# # --- –ö–õ–Æ–ß–û–í–ê –ü–†–û–ú–Ø–ù–ê ---
# # –í—Ä—ä—â–∞–º–µ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞—Ç–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –∫—ä–º –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è –π –≤–∏–¥ —Å –µ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç,
# # –∑–∞ –¥–∞ –µ —Å—ä–≤–º–µ—Å—Ç–∏–º–∞ —Å —Ç–≤–æ—è—Ç–∞ –≤–µ—Ä—Å–∏—è –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞ websockets.
# async def handler(websocket):
#     """
#     –û–±—Ä–∞–±–æ—Ç–≤–∞ –Ω–æ–≤–∏ WebSocket –≤—Ä—ä–∑–∫–∏.
#     """
#     print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–µ —Å–≤—ä—Ä–∑–∞ –æ—Ç {websocket.remote_address}")
#     clients.add(websocket)
#     try:
#         await websocket.wait_closed()
#     finally:
#         print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {websocket.remote_address} —Å–µ —Ä–∞–∑–∫–∞—á–∏.")
#         clients.remove(websocket)

# async def main():
#     """
#     –ì–ª–∞–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —Å—ä—Ä–≤—ä—Ä–∞ –∏ —Ü–∏–∫—ä–ª–∞ –∑–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ.
#     """
#     # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Ü–∏–∫—ä–ª–∞ –∑–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –≤ –æ—Ç–¥–µ–ª–Ω–∞ –Ω–∏—à–∫–∞
#     threading.Thread(target=lambda: asyncio.run(recognize_loop()), daemon=True).start()
    
#     print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ WebSocket —Å—ä—Ä–≤—ä—Ä–∞ –Ω–∞ ws://localhost:8765 ...")
#     async with websockets.serve(handler, "localhost", 8765):
#         await asyncio.Future()  # –†–∞–±–æ—Ç–∏ –≤–µ—á–Ω–æ

# if __name__ == "__main__":
#     try:
#         asyncio.run(main())
#     except KeyboardInterrupt:
#         print("\n–°—ä—Ä–≤—ä—Ä—ä—Ç –µ —Å–ø—Ä—è–Ω.")





# import asyncio
# import websockets
# import json
# import speech_recognition as sr
# import sys
# import io
# import threading
# import os
# import sqlite3
# from dotenv import load_dotenv

# import google.generativeai as genai

# from elevenlabs.client import ElevenLabs
# from elevenlabs import play
# from elevenlabs import voices  # –∞–∫–æ –∏—Å–∫–∞—à –¥–∞ –≤–∏–¥–∏—à –≥–ª–∞—Å–æ–≤–µ—Ç–µ

# import serial
# import time

# PORT = 'COM4'       # –°–º–µ–Ω–∏ —Å —Ç–≤–æ—è —Å–µ—Ä–∏–µ–Ω –ø–æ—Ä—Ç
# BAUD_RATE = 115200

# # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–∞ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞ ---
# sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
# sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# # --- API Keys and Configuration ---
# ELEVENLABS_API_KEY = os.getenv("ELEVEN_LABS_API")
# GEMINI_API_KEY = os.getenv("GEMINI_KEY")

# # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ ElevenLabs –∫–ª–∏–µ–Ω—Ç —Å API –∫–ª—é—á–∞
# client = ElevenLabs(api_key=ELEVENLABS_API_KEY)

# genai.configure(api_key=GEMINI_API_KEY)
# GEMINI_MODEL = genai.GenerativeModel('gemini-1.5-flash')

# # –ò–∑–±–æ—Ä –Ω–∞ –≥–ª–∞—Å (–ø—Ä–∏–º–µ—Ä–µ–Ω ID, –∑–∞–º–µ–Ω–∏ —Å —Ç–≤–æ–π)
# ELEVENLABS_VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID")

# r = sr.Recognizer()
# clients = set()

# current_state = "idle"
# state_lock = asyncio.Lock()

# load_dotenv()

# async def set_state(new_state: str):
#     global current_state
#     async with state_lock:
#         if current_state != new_state:
#             print(f"Changing state from '{current_state}' to '{new_state}'")
#             current_state = new_state
#             message = json.dumps({"state": current_state})
#             await send_to_all(message)

# def record_text_blocking():
#     try:
#         with sr.Microphone() as source:
#             r.adjust_for_ambient_noise(source, duration=0.2)
#             print(f"[{current_state}] –°–ª—É—à–∞–º –∑–∞ –∫–æ–º–∞–Ω–¥–∞...")
#             audio = r.listen(source)
#             MyText = r.recognize_google(audio, language="bg-BG")
#             print(f"[{current_state}] –í–∏–µ –∫–∞–∑–∞—Ö—Ç–µ: {MyText}")
#             return MyText.lower()
#     except sr.RequestError as e:
#         print(f"[{current_state}] –ì—Ä–µ—à–∫–∞ –≤ –∑–∞—è–≤–∫–∞—Ç–∞ –∫—ä–º API-—Ç–æ; {e}")
#         return None
#     except sr.UnknownValueError:
#         print(f"[{current_state}] –ù–µ —Ä–∞–∑–±—Ä–∞—Ö –∫–∞–∑–∞–Ω–æ—Ç–æ.")
#         return None
#     except Exception as e:
#         print(f"[{current_state}] –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
#         return None

# async def synthesize_speech(text: str):
#     print(f"[{current_state}] –°–∏–Ω—Ç–µ–∑–∏—Ä–∞–º —Ä–µ—á —Å Eleven Labs: '{text}'...")
#     try:
#         audio = client.generate(text=text, voice=ELEVENLABS_VOICE_ID)
#         play(audio)
#         print(f"[{current_state}] –ê—É–¥–∏–æ—Ç–æ –µ –≤—ä–∑–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ.")
#     except Exception as e:
#         print(f"[{current_state}] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑ –∏ –≤—ä–∑–ø—Ä–æ–∏–∑–≤–µ–∂–¥–∞–Ω–µ: {e}")

# async def get_gemini_response(prompt: str) -> str:
#     print(f"[{current_state}] –ò–∑–ø—Ä–∞—â–∞–º –ø—Ä–æ–º–ø—Ç –∫—ä–º Gemini: '{prompt}'...")
#     try:
#         response = GEMINI_MODEL.generate_content(prompt)
#         if hasattr(response, 'text') and response.text:
#             print(f"[{current_state}] –û—Ç–≥–æ–≤–æ—Ä –æ—Ç Gemini: {response.text}")
#             return response.text
#         else:
#             print(f"[{current_state}] Gemini –Ω–µ –≤—ä—Ä–Ω–∞ —Ç–µ–∫—Å—Ç.")
#             return "–°—ä–∂–∞–ª—è–≤–∞–º, –Ω–µ –º–æ–≥–∞ –¥–∞ –æ—Ç–≥–æ–≤–æ—Ä—è."
#     except Exception as e:
#         print(f"[{current_state}] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ Gemini API: {e}")
#         return "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å Gemini."

# async def send_to_all(message):
#     if clients:
#         await asyncio.gather(*[client.send(message) for client in clients])

# async def recognize_loop():
#     loop = asyncio.get_running_loop()
#     while True:
#         await set_state("idle")
#         print("–°–ª—É—à–∞–º –∑–∞ '–î–∂–∞—Ä–≤–∏—Å'...")
#         text = await loop.run_in_executor(None, record_text_blocking)
#         if text and "–¥–∂–∞—Ä–≤–∏—Å" in text or "–¥–∂–∞—Ä–≤–∏" in text:
#             print("üü¢ '–î–∂–∞—Ä–≤–∏—Å' –µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç!")
#             await set_state("listening")
#             await synthesize_speech("–°–ª—É—à–∞–º")
#             user_command = await loop.run_in_executor(None, record_text_blocking)
#             if user_command:
#                 print(f"‚ùì –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∫–∞–∑–∞: {user_command}")
#                 await set_state("answering")
#                 gemini_answer = await get_gemini_response(user_command)
#                 if gemini_answer:
#                     await synthesize_speech(gemini_answer)
#             else:
#                 print("‚ö†Ô∏è –ù–µ —Ä–∞–∑–±—Ä–∞—Ö –∫–æ–º–∞–Ω–¥–∞—Ç–∞ —Å–ª–µ–¥ '–î–∂–∞—Ä–≤–∏—Å'.")
#         else:
#             await asyncio.sleep(0.5)

# async def handler(websocket):
#     print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–µ —Å–≤—ä—Ä–∑–∞: {websocket.remote_address}")
#     clients.add(websocket)
#     await websocket.send(json.dumps({"state": current_state}))
#     try:
#         await websocket.wait_closed()
#     finally:
#         print(f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å–µ —Ä–∞–∑–∫–∞—á–∏: {websocket.remote_address}")
#         clients.remove(websocket)

# async def sendToDevice(message:str, macAddress:str):
#     try:
#         ser = serial.Serial(PORT, BAUD_RATE, timeout=5)
#         time.sleep(2)  # –ò–∑—á–∞–∫–≤–∞ ESP-—Ç–æ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞
#         print(f"Connected to the {PORT}")
#     except serial.SerialException as e:
#         print("Error in opening the serial port:", e)
#         exit(1)

#     if message == "get":
#         # –ò–∑–ø—Ä–∞—â–∞–º–µ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ "get"
#         ser.write(f'get {macAddress}\n'.encode())
#         print("üîÅ Sent: get")

#         # –ß–µ—Ç–µ–º –æ—Ç–≥–æ–≤–æ—Ä–∞ –Ω–∞ ESP-—Ç–æ
#         while True:
#             if ser.in_waiting > 0:
#                 line = ser.readline().decode('utf-8', errors='ignore').strip()
#                 if line:
#                     print("üì• Received:", line)
#                     # –°–ø–∏—Ä–∞–Ω–µ, –∞–∫–æ —Å–º–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—á–∞–∫–≤–∞–Ω–∏—è –æ—Ç–≥–æ–≤–æ—Ä
#                     if "Temperature:" in line or "Humidity:" in line:
#                         break


#     elif message == "get2":
#         # –ò–∑–ø—Ä–∞—â–∞–º–µ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ "get"
#         ser.write(f'get2 {macAddress}\n'.encode())
#         print("üîÅ Sent: get2")

#         # –ß–µ—Ç–µ–º –æ—Ç–≥–æ–≤–æ—Ä–∞ –Ω–∞ ESP-—Ç–æ
#         while True:
#             if ser.in_waiting > 0:
#                 line = ser.readline().decode('utf-8', errors='ignore').strip()
#                 if line:
#                     print("üì• Received:", line)
#                     # –°–ø–∏—Ä–∞–Ω–µ, –∞–∫–æ —Å–º–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—á–∞–∫–≤–∞–Ω–∏—è –æ—Ç–≥–æ–≤–æ—Ä
#                     if "Temperature:" in line or "Humidity:" in line:
#                         break

#     ser.close()
#     print("Connection is ended.")

# async def checkDBforActivity():
#     # –°–≤—ä—Ä–∑–≤–∞–Ω–µ –∫—ä–º –±–∞–∑–∞—Ç–∞
#     conn = sqlite3.connect("jarvis_db.db")
#     cursor = conn.cursor()

#     print("table: Relay")
#     print("-" * 20)

#     try:
#         # –ó–∞—è–≤–∫–∞ —Å–∞–º–æ –∑–∞ Relay: Checked == 0 –∏ FIFO –ø–æ TimeOfRecord
#         cursor.execute("""
#             SELECT * FROM Relay
#             WHERE Checked = 0
#             ORDER BY TimeOfRecord ASC
#         """)

#         rows = cursor.fetchall()

#         # –ò–º–µ–Ω–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
#         col_names = [description[0] for description in cursor.description]
#         print(" | ".join(col_names))
#         print("-" * 50)

#         if not rows:
#             print("[nqma zapisi]")
#         else:
#             for row in rows:
#                 print(" | ".join(str(x) for x in row))

#     except Exception as e:
#         print("‚ö†Ô∏è Error in reading Relay:", e)

#     # –ó–∞—Ç–≤–∞—Ä—è–Ω–µ
#     conn.close()


# async def main():
#     threading.Thread(target=lambda: asyncio.run(recognize_loop()), daemon=True).start()
#     print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–º WebSocket —Å—ä—Ä–≤—ä—Ä –Ω–∞ ws://localhost:8765 ...")
#     async with websockets.serve(handler, "localhost", 8765):
#         await asyncio.Future()

# if __name__ == "__main__":
#     try:
#         asyncio.run(main())
#     except KeyboardInterrupt:
#         print("\n–°—ä—Ä–≤—ä—Ä—ä—Ç –µ —Å–ø—Ä—è–Ω.")






# import sqlite3

# # –°–≤—ä—Ä–∑–≤–∞–Ω–µ –∫—ä–º –±–∞–∑–∞—Ç–∞
# conn = sqlite3.connect("jarvis_db.db")
# cursor = conn.cursor()

# # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–∏
# cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
# tables = cursor.fetchall()

# # –ü—Ä–µ–º–∏–Ω–∞–≤–∞–Ω–µ –ø—Ä–µ–∑ –≤—Å—è–∫–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏ –∏–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ —ù
# for table in tables:
#     table_name = table[0]
#     print(f"\ntable: {table_name}")
#     print("-" * (10 + len(table_name)))

#     try:
#         cursor.execute(f"SELECT * FROM {table_name}")
#         rows = cursor.fetchall()

#         # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
#         col_names = [description[0] for description in cursor.description]
#         print(" | ".join(col_names))
#         print("-" * 50)

#         if not rows:
#             print("[nqma zapisi]")
#         else:
#             for row in rows:
#                 print(" | ".join(str(x) for x in row))

#     except Exception as e:
#         print("‚ö†Ô∏è Error in reading the DB:", e)

# # –ó–∞—Ç–≤–∞—Ä—è–Ω–µ
# conn.close()




import asyncio
import websockets
import json
import speech_recognition as sr
import sys
import io
import threading
import os
import sqlite3
import urllib
from dotenv import load_dotenv

import google.generativeai as genai
from ollama import chat
from ollama import ChatResponse

from elevenlabs.client import ElevenLabs
from elevenlabs import play
from elevenlabs import voices

import serial
import time
from datetime import datetime

PORT = 'COM4'
BAUD_RATE = 115200

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –∫–∏—Ä–∏–ª–∏—Ü–∞ ---
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

load_dotenv()

ELEVENLABS_API_KEY = os.getenv("ELEVEN_LABS_API")
GEMINI_API_KEY = os.getenv("GEMINI_KEY")
ELEVENLABS_VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID")

client = ElevenLabs(api_key=ELEVENLABS_API_KEY)

genai.configure(api_key=GEMINI_API_KEY)
GEMINI_MODEL = genai.GenerativeModel('gemini-1.5-flash')

r = sr.Recognizer()
clients = set()

current_state = "idle"
state_lock = asyncio.Lock()

async def set_state(new_state: str):
    global current_state
    async with state_lock:
        if current_state != new_state:
            print(f"Changing state from '{current_state}' to '{new_state}'")
            current_state = new_state
            message = json.dumps({"state": current_state})
            await send_to_all(message)

def record_text_blocking():
    try:
        with sr.Microphone() as source:
            r.adjust_for_ambient_noise(source, duration=0.2)
            print(f"[{current_state}] –°–ª—É—à–∞–º –∑–∞ –∫–æ–º–∞–Ω–¥–∞...")
            audio = r.listen(source)
            MyText = r.recognize_google(audio, language="bg-BG")
            print(f"[{current_state}] –í–∏–µ –∫–∞–∑–∞—Ö—Ç–µ: {MyText}")
            return MyText.lower()
    except sr.RequestError as e:
        print(f"[{current_state}] –ì—Ä–µ—à–∫–∞ –≤ –∑–∞—è–≤–∫–∞—Ç–∞ –∫—ä–º API-—Ç–æ; {e}")
        return None
    except sr.UnknownValueError:
        print(f"[{current_state}] –ù–µ —Ä–∞–∑–±—Ä–∞—Ö –∫–∞–∑–∞–Ω–æ—Ç–æ.")
        return None
    except Exception as e:
        print(f"[{current_state}] –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        return None

async def synthesize_speech(text: str):
    print(f"[{current_state}] –°–∏–Ω—Ç–µ–∑–∏—Ä–∞–º —Ä–µ—á —Å Eleven Labs: '{text}'...")
    try:
        audio = client.generate(text=text, voice=ELEVENLABS_VOICE_ID)
        play(audio)
        print(f"[{current_state}] –ê—É–¥–∏–æ—Ç–æ –µ –≤—ä–∑–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"[{current_state}] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑ –∏ –≤—ä–∑–ø—Ä–æ–∏–∑–≤–µ–∂–¥–∞–Ω–µ: {e}")

async def get_gemini_response(prompt: str) -> str:
    print(f"[{current_state}] –ò–∑–ø—Ä–∞—â–∞–º –ø—Ä–æ–º–ø—Ç –∫—ä–º Gemini: '{prompt}'...")
    try:
        response = GEMINI_MODEL.generate_content(prompt)
        if hasattr(response, 'text') and response.text:
            print(f"[{current_state}] –û—Ç–≥–æ–≤–æ—Ä –æ—Ç Gemini: {response.text}")
            return response.text
        else:
            print(f"[{current_state}] Gemini –Ω–µ –≤—ä—Ä–Ω–∞ —Ç–µ–∫—Å—Ç.")
            return "–°—ä–∂–∞–ª—è–≤–∞–º, –Ω–µ –º–æ–≥–∞ –¥–∞ –æ—Ç–≥–æ–≤–æ—Ä—è."
    except Exception as e:
        print(f"[{current_state}] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ Gemini API: {e}")
        return "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å Gemini."

async def get_tiny_llama_response(prompt:str ) -> str:
    print(f"[{current_state}] –ò–∑–ø—Ä–∞—â–∞–º –ø—Ä–æ–º–ø—Ç –∫—ä–º –õ–æ–∫–∞–ª–Ω–∏—è –º–æ–¥–µ–ª (tiny llama): '{prompt}'...")
    
    response: ChatResponse = chat(model='gemma3', messages=[
    {
        'role': 'user',
        'content': {prompt},
    },
    ])

    print(response['message']['content'])
    print(response.message.content)
    return response.message.content

async def send_to_all(message):
    if clients:
        await asyncio.gather(*[client.send(message) for client in clients])

async def recognize_loop():
    loop = asyncio.get_running_loop()
    while True:
        await set_state("idle")
        print("–°–ª—É—à–∞–º –∑–∞ '–î–∂–∞—Ä–≤–∏—Å'...")
        text = await loop.run_in_executor(None, record_text_blocking)
        
        if text and ("–¥–∂–∞—Ä–≤–∏—Å" in text or "–¥–∂–∞—Ä–≤–∏" in text):
            print("üü¢ '–î–∂–∞—Ä–≤–∏—Å' –µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç!")
            await set_state("listening")
            await synthesize_speech("–°–ª—É—à–∞–º")
            user_command = await loop.run_in_executor(None, record_text_blocking)
            
            if user_command:
                print(f"‚ùì –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∫–∞–∑–∞: {user_command}")
                await set_state("answering")
                if(checkWifi()):
                    model_answer = await get_gemini_response(user_command)
                else:
                    model_answer = await get_tiny_llama_response(user_command)

                if model_answer:
                    await synthesize_speech(model_answer)
            else:
                print("‚ö†Ô∏è –ù–µ —Ä–∞–∑–±—Ä–∞—Ö –∫–æ–º–∞–Ω–¥–∞—Ç–∞ —Å–ª–µ–¥ '–î–∂–∞—Ä–≤–∏—Å'.")
        else:
            await asyncio.sleep(0.5)

async def handler(websocket):
    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–µ —Å–≤—ä—Ä–∑–∞: {websocket.remote_address}")
    clients.add(websocket)
    await websocket.send(json.dumps({"state": current_state}))
    try:
        await websocket.wait_closed()
    finally:
        print(f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å–µ —Ä–∞–∑–∫–∞—á–∏: {websocket.remote_address}")
        clients.remove(websocket)

def sendInitToDevice(macAddress: str) -> bool:
    try:
        ser = serial.Serial(PORT, BAUD_RATE, timeout=5)
        time.sleep(2)  # –ò–∑—á–∞–∫–≤–∞ ESP-—Ç–æ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞
        print(f"Connected to the {PORT}")
    except serial.SerialException as e:
        print("Error in opening the serial port:", e)
        return ""  # Return empty string on error

    ser.write(f'init {macAddress}\n'.encode())
    print(f"üîÅ Sent: init to {macAddress}")

    line = ""
    start_time = time.time()
    while True:
        if ser.in_waiting > 0:
            line = ser.readline().decode('utf-8', errors='ignore').strip()
            if line == "Connection Successful":
                print("üì• Received:", line)
                break
        # Optional: timeout after 5 seconds
        if time.time() - start_time > 5:
            print("‚ö†Ô∏è Timeout waiting for response.")
            break

    ser.close()
    print("Connection is ended.")
    return True

def sendGetToDevice(macAddress: str) -> str:
    try:
        ser = serial.Serial(PORT, BAUD_RATE, timeout=5)
        time.sleep(2)  # –ò–∑—á–∞–∫–≤–∞ ESP-—Ç–æ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞
        print(f"Connected to the {PORT}")
    except serial.SerialException as e:
        print("Error in opening the serial port:", e)
        return ""  # Return empty string on error

    ser.write(f'get {macAddress}\n'.encode())
    print("üîÅ Sent: get")

    line = ""
    start_time = time.time()
    while True:
        if ser.in_waiting > 0:
            line = ser.readline().decode('utf-8', errors='ignore').strip()
            if line:
                print("üì• Received:", line)
                break
        # Optional: timeout after 5 seconds
        if time.time() - start_time > 5:
            print("‚ö†Ô∏è Timeout waiting for response.")
            break

    ser.close()
    print("Connection is ended.")
    return line

def sendGetToDevice(macAddress:str, message:str, deviceType:str) -> str:
    try:
        ser = serial.Serial(PORT, BAUD_RATE, timeout=5)
        time.sleep(2)  # –ò–∑—á–∞–∫–≤–∞ ESP-—Ç–æ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞
        print(f"Connected to the {PORT}")
    except serial.SerialException as e:
        print("Error in opening the serial port:", e)
        exit(1)

    if(deviceType == "IR"):
        # –ò–∑–ø—Ä–∞—â–∞–º–µ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ "get2"
        ser.write(f'get2 {macAddress} {message}\n'.encode())
        print("üîÅ Sent: get2")

        # –ß–µ—Ç–µ–º –æ—Ç–≥–æ–≤–æ—Ä–∞ –Ω–∞ ESP-—Ç–æ
        while True:
            if ser.in_waiting > 0:
                line = ser.readline().decode('utf-8', errors='ignore').strip()
                if line:
                    print("üì• Received:", line)
                    break
                
    elif(deviceType == "RGB"):
        # –ò–∑–ø—Ä–∞—â–∞–º–µ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ "get2"
        messageToSend = message + " - " + "[Red;Green;Blue;Intensity]"

        ser.write(f'get2 {macAddress} {messageToSend}\n'.encode())
        print("üîÅ Sent: get2")

        # –ß–µ—Ç–µ–º –æ—Ç–≥–æ–≤–æ—Ä–∞ –Ω–∞ ESP-—Ç–æ
        while True:
            if ser.in_waiting > 0:
                line = ser.readline().decode('utf-8', errors='ignore').strip()
                if line:
                    print("üì• Received:", line)
                    break

    ser.close()
    print("Connection is ended.")
    return line

async def checkDHTSensor():
    macAddress = searchMacAddressInDB("DHT")
    data = sendGetToDevice(macAddress)

    temperature = None
    humidity = None

        # Example data: "T:23.5f,H:22.0f"
    try:
        parts = data.split(',')
        for part in parts:
            if part.startswith("T:"):
                temperature = part.split(":")[1].replace("f", "").strip()
            elif part.startswith("H:"):
                humidity = part.split(":")[1].replace("f", "").strip()
    except Exception as e:
        print("Error parsing DHT data:", e)

    # Insert into DHT table
    conn = sqlite3.connect("jarvis_db.db")
    cursor = conn.cursor()

    time_of_record = getTime()
    
    cursor.execute("""
        INSERT INTO DHT (DeviceMACID, LastTemperature, LastHumidity, TimeOfRecord)
        VALUES (?, ?, ?, ?)
    """, (macAddress, temperature, humidity, time_of_record))

    conn.commit()
    conn.close()

async def checkDBforActivity():
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –±–∞–∑–∞—Ç–∞ –±–µ–∑ –¥–∞ –±–ª–æ–∫–∏—Ä–∞ event loop."""
    def query_db():
        # Searching for activity in table Relay
        conn = sqlite3.connect("jarvis_db.db")
        conn.row_factory = sqlite3.Row  # This allows access by column name
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM Relay
            WHERE Checked = 0
            ORDER BY TimeOfRecord ASC
        """)
        rows = cursor.fetchall()

        if not rows:
            print("[nqma zapisi]")  # No records found
        else:
            for row in rows:
                device_mac = row["DeviceMACID"]
                last_state = row["LastState"]
                time_of_record = row["TimeOfRecord"]
                checked = row["Checked"]
                print(f"MAC: {device_mac}, State: {last_state}, Time: {time_of_record}, Checked: {checked}")

                sendGetToDevice(macAddress=device_mac)

                # Delete the current row
                cursor.execute("""
                    DELETE FROM Relay
                    WHERE DeviceMACID = ? AND TimeOfRecord = ?
                """, (device_mac, time_of_record))

                print(f"Deleted row with MAC: {device_mac} and Time: {time_of_record}")

        conn.commit()

        # Searching for activity in table RGB
        conn = sqlite3.connect("jarvis_db.db")
        conn.row_factory = sqlite3.Row  # This allows access by column name
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM RGB
            WHERE Checked = 0
            ORDER BY TimeOfRecord ASC
        """)
        rows = cursor.fetchall()

        if not rows:
            print("[nqma zapisi]")  # No records found
        else:
            for row in rows:
                device_mac = row["DeviceMACID"]
                last_colour = row["LastColour"]
                last_intensity = row["LastIntensity"]
                time_of_record = row["TimeOfRecord"]
                checked = row["Checked"]
                print(f"MAC: {device_mac}, State: {last_colour}, Type: {last_intensity}, Time: {time_of_record}, Checked: {checked}")

                messageToSend = last_colour + " " + last_intensity
                sendGetToDevice(macAddress=device_mac, message=messageToSend)

                # Delete the current row
                cursor.execute("""
                    DELETE FROM RGB
                    WHERE DeviceMACID = ? AND TimeOfRecord = ?
                """, (device_mac, time_of_record))

                print(f"Deleted row with MAC: {device_mac} and Time: {time_of_record}")

        conn.commit()


        # Searching for activity in table IR
        conn = sqlite3.connect("jarvis_db.db")
        conn.row_factory = sqlite3.Row  # This allows access by column name
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM IR
            WHERE Checked = 0
            ORDER BY TimeOfRecord ASC
        """)
        rows = cursor.fetchall()

        if not rows:
            print("[nqma zapisi]")  # No records found
        else:
            for row in rows:
                device_mac = row["DeviceMACID"]
                last_code_sent = row["LastCodeSent"]
                time_of_record = row["TimeOfRecord"]
                checked = row["Checked"]
                print(f"MAC: {device_mac}, State: {last_state}, Code: {last_code_sent}, Time: {time_of_record}, Checked: {checked}")

                sendGetToDevice(macAddress=device_mac, message=last_code_sent)

                # Delete the current row
                cursor.execute("""
                    DELETE FROM IR
                    WHERE DeviceMACID = ? AND TimeOfRecord = ?
                """, (device_mac, time_of_record))

                print(f"Deleted row with MAC: {device_mac} and Time: {time_of_record}")

        conn.commit()


    await asyncio.to_thread(query_db)

async def db_loop():
    """–ò–∑–ø—ä–ª–Ω—è–≤–∞ checkDBforActivity() –Ω–∞ –≤—Å–µ–∫–∏ 5 —Å–µ–∫—É–Ω–¥–∏."""
    while True:
        await checkDBforActivity()
        await asyncio.sleep(5)

async def dht_loop():
    """–ò–∑–ø—ä–ª–Ω—è–≤–∞ checkDHTSensor() –Ω–∞ –≤—Å–µ–∫–∏ 15 –º–∏–Ω—É—Ç–∏."""
    while True:
        await checkDHTSensor()
        await asyncio.sleep(900)

def checkWifi() -> bool:
    try:
        url = "https://www.google.com"
        urllib.request.urlopen(url, timeout=5)
        return True
    except:
        return False

def getTime() -> str:
    current_time = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
    return current_state

def searchMacAddressInDB(deviceType: str) -> str: # not sure if it works
    conn = sqlite3.connect("jarvis_db.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT DeviceMACID FROM Devices
        WHERE DeviceType = ?
    """, (deviceType,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else ""

async def main():
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ voice loop –≤ –æ—Ç–¥–µ–ª–µ–Ω thread
    threading.Thread(target=lambda: asyncio.run(recognize_loop()), daemon=True).start()
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ DB loop –≤ asyncio
    asyncio.create_task(db_loop())
    asyncio.create_task(dht_loop())

    print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–º WebSocket —Å—ä—Ä–≤—ä—Ä –Ω–∞ ws://localhost:8765 ...")
    async with websockets.serve(handler, "localhost", 8765):
        await asyncio.Future()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°—ä—Ä–≤—ä—Ä—ä—Ç –µ —Å–ø—Ä—è–Ω.")
